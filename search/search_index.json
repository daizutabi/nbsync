{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nbsync","text":"<pre><code>import nbsync\nnbsync\n</code></pre> <pre><code>&lt;module 'nbsync' from '/home/runner/work/nbsync/nbsync/src/nbsync/__init__.py'&gt;\n</code></pre> <pre><code>for x in [1, 2, 3]:\n    print(x)\n</code></pre> <pre><code>1\n2\n3\n</code></pre> <pre><code>$ date\nSat Nov  1 10:27:20 UTC 2025\n</code></pre> <pre><code>$ tree .\n.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nbsync\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.cpython-313.pyc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 cell.cpython-313.pyc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 logger.cpython-313.pyc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 markdown.cpython-313.pyc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebook.cpython-313.pyc\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 sync.cpython-313.pyc\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cell.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 logger.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 markdown.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 notebook.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 py.typed\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 sync.py\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_cell.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_logger.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_markdown.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_notebook.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_sync.py\n\u2514\u2500\u2500 uv.lock\n\n6 directories, 26 files\n</code></pre>"},{"location":"api/nbsync/","title":"nbsync","text":"nbsync<p> source package nbsync </p> <p> Classes </p> <ul> <li> <p>Cell</p> </li> <li> <p>Store \u2014 Manage notebook files from one or more source directories.</p> </li> <li> <p>Synchronizer</p> </li> </ul> <p> source dataclass Cell(image: Image, language: str, mime: str, content: bytes | str) </p> <p> Attributes </p> <ul> <li> <p>image :  Image \u2014 The image instance from the Markdown file.</p> </li> <li> <p>language :  str \u2014 The language of the source to be used to generate the image.</p> </li> <li> <p>mime :  str \u2014 The MIME type of the image.</p> </li> <li> <p>content :  bytes | str \u2014 The content of the image.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>convert</p> </li> </ul> <p> source method Cell.convert(*, escape: bool = False) \u2192 str </p> <p> class Store(src_dirs: str | Path | Iterable[str | Path]) </p> <p>Manage notebook files from one or more source directories.</p> <p>Provides a centralized interface for reading notebook files and caching their content for efficient access. Automatically reloads files when they have been modified on disk.</p> <p>Initialize a new Store instance.</p> <p> Attributes </p> <ul> <li> <p>src_dirs :  list[Path] \u2014 List of source directories to search for notebook files.</p> </li> <li> <p>nodes :  dict[Path, NotebookNode] \u2014 Dictionary mapping file paths to their notebook nodes.</p> </li> <li> <p>st_mtime :  dict[Path, float] \u2014 Dictionary mapping file paths to their last modification times.</p> </li> <li> <p>url :  str \u2014 String representing the last accessed URL.</p> </li> </ul> <p> Parameters </p> <ul> <li> <p>src_dirs :  str | Path | Iterable[str | Path] \u2014 One or more directories to search for notebook files. Can be a single path or a collection of paths.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>find_path \u2014 Find the absolute path of a notebook file.</p> </li> <li> <p>read \u2014 Read a notebook file and return its content.</p> </li> <li> <p>write \u2014 Write a notebook node to a file.</p> </li> </ul> <p> method Store.find_path(url: str) \u2192 Path </p> <p>Find the absolute path of a notebook file.</p> <p>Searches for the notebook file in the source directories. If the URL is an absolute path, it is returned directly.</p> <p> Parameters </p> <ul> <li> <p>url :  str \u2014 The URL or relative path of the notebook file.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>Path \u2014 The absolute path to the notebook file.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>ValueError \u2014 If the file cannot be found in any source directory.</p> </li> </ul> <p> method Store.read(url: str) \u2192 NotebookNode </p> <p>Read a notebook file and return its content.</p> <p>If the file has been modified since it was last read, it is reloaded. If no URL is provided, the last URL is used.</p> <p> Parameters </p> <ul> <li> <p>url :  str \u2014 The URL or relative path of the notebook file.</p> </li> </ul> <p> Returns </p> <ul> <li> <p>NotebookNode \u2014 The notebook content.</p> </li> </ul> <p> method Store.write(url: str, notebook_node: NotebookNode) \u2192 None </p> <p>Write a notebook node to a file.</p> <p>Currently only supports writing to .ipynb files.</p> <p> Parameters </p> <ul> <li> <p>url :  str \u2014 The URL or relative path of the notebook file.</p> </li> <li> <p>notebook_node :  NotebookNode \u2014 The notebook content to write.</p> </li> </ul> <p> Raises </p> <ul> <li> <p>NotImplementedError \u2014 If the file format is not supported for writing.</p> </li> </ul> <p> source dataclass Synchronizer(store: Store) </p> <p> Methods </p> <ul> <li> <p>parse</p> </li> <li> <p>execute</p> </li> <li> <p>convert</p> </li> </ul> <p> source method Synchronizer.parse(text: str) \u2192 Iterator[str | Image | CodeBlock] </p> <p> source method Synchronizer.execute(src_uri: str | None = None) \u2192 None </p> <p> Raises </p> <ul> <li> <p>SystemExit</p> </li> </ul> <p> source method Synchronizer.convert(text: str, src_uri: str | None = None) \u2192 Iterator[str | Cell] </p>"},{"location":"api/nbsync/cell/","title":"nbsync.cell","text":"nbsync.cell<p> source module nbsync.cell </p> <p> Classes </p> <ul> <li> <p>Attributes</p> </li> <li> <p>Cell</p> </li> </ul> <p> Functions </p> <ul> <li> <p>get_source</p> </li> <li> <p>get_text_markdown</p> </li> <li> <p>get_image_markdown</p> </li> <li> <p>get_markdown</p> </li> <li> <p>get_tabbed</p> </li> </ul> <p> source dataclass Attributes(source: str, tabs: str, identifier: str, result: str) </p> <p> Methods </p> <ul> <li> <p>pop</p> </li> </ul> <p> source classmethod Attributes.pop(attrs: dict[str, str]) \u2192 Attributes </p> <p> source dataclass Cell(image: Image, language: str, mime: str, content: bytes | str) </p> <p> Attributes </p> <ul> <li> <p>image :  Image \u2014 The image instance from the Markdown file.</p> </li> <li> <p>language :  str \u2014 The language of the source to be used to generate the image.</p> </li> <li> <p>mime :  str \u2014 The MIME type of the image.</p> </li> <li> <p>content :  bytes | str \u2014 The content of the image.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>convert</p> </li> </ul> <p> source method Cell.convert(*, escape: bool = False) \u2192 str </p> <p> source get_source(cell: Cell, *, console: bool = False, include_attrs: bool = False, include_identifier: bool = False) \u2192 str </p> <p> source get_text_markdown(cell: Cell, result: str, *, escape: bool = False) \u2192 str </p> <p> source get_image_markdown(cell: Cell) \u2192 str </p> <p> source get_markdown(kind: str, source: str, result: str, tabs: str) \u2192 str </p> <p> source get_tabbed(left: str, right: str, tabs: str) \u2192 str </p>"},{"location":"api/nbsync/logger/","title":"nbsync.logger","text":"nbsync.logger<p> source module nbsync.logger </p> <p> Functions </p> <ul> <li> <p>set_logger</p> </li> <li> <p>debug</p> </li> <li> <p>info</p> </li> <li> <p>warning</p> </li> <li> <p>error</p> </li> </ul> <p> source set_logger(logger: Logger | LoggerAdapter[Logger] | None = None) \u2192 Logger | LoggerAdapter[Logger] </p> <p> source debug(msg: str, *args: Any, **kwargs: Any) \u2192 None </p> <p> source info(msg: str, *args: Any, **kwargs: Any) \u2192 None </p> <p> source warning(msg: str, *args: Any, **kwargs: Any) \u2192 None </p> <p> source error(msg: str, *args: Any, **kwargs: Any) \u2192 None </p>"},{"location":"api/nbsync/markdown/","title":"nbsync.markdown","text":"nbsync.markdown<p> source module nbsync.markdown </p> <p> Functions </p> <ul> <li> <p>convert_code_block</p> </li> <li> <p>convert_image</p> </li> <li> <p>create_code_block</p> </li> <li> <p>create_subprocess_source \u2014 Create a Python source that runs the command in subprocess.</p> </li> <li> <p>set_url \u2014 Set the URL of the image or code block.</p> </li> <li> <p>resolve_urls \u2014 Parse the URL of the image or code block.</p> </li> <li> <p>convert_code_blocks</p> </li> <li> <p>convert_images</p> </li> <li> <p>parse</p> </li> <li> <p>is_truelike</p> </li> </ul> <p> source convert_code_block(code_block: CodeBlock) \u2192 Iterator[Element] </p> <p> source convert_image(image: Image, index: int | None = None) \u2192 Iterator[Element] </p> <p> Raises </p> <ul> <li> <p>ValueError</p> </li> </ul> <p> source create_code_block(image: Image) \u2192 CodeBlock </p> <p> source create_subprocess_source(source: str) \u2192 str </p> <p>Create a Python source that runs the command in subprocess.</p> <p> source set_url(elem: Image | CodeBlock, url: str) \u2192 tuple[Element, str] </p> <p>Set the URL of the image or code block.</p> <p>If the URL is empty or \".\", set the URL to the current URL.</p> <p> source resolve_urls(elems: Iterable[Element]) \u2192 Iterator[Element] </p> <p>Parse the URL of the image or code block.</p> <p>If a code block has no URL, yield the text of the code block, which means that the code block is not processed further.</p> <p> source convert_code_blocks(elems: Iterable[Element]) \u2192 Iterator[Element] </p> <p> source convert_images(elems: Iterable[Element]) \u2192 Iterator[Element] </p> <p> source parse(text: str) \u2192 Iterator[Element] </p> <p> source is_truelike(value: str | None) \u2192 bool </p>"},{"location":"api/nbsync/notebook/","title":"nbsync.notebook","text":"nbsync.notebook<p> source module nbsync.notebook </p> <p> Classes </p> <ul> <li> <p>Notebook</p> </li> </ul> <p> source class Notebook(nb: NotebookNode) </p> <p> Methods </p> <ul> <li> <p>set_execution_needed</p> </li> <li> <p>add_cell</p> </li> <li> <p>equals</p> </li> <li> <p>execute</p> </li> </ul> <p> source method Notebook.set_execution_needed() \u2192 None </p> <p> source method Notebook.add_cell(identifier: str, source: str) \u2192 None </p> <p> source method Notebook.equals(other: Notebook) \u2192 bool </p> <p> source method Notebook.execute() \u2192 float </p>"},{"location":"api/nbsync/sync/","title":"nbsync.sync","text":"nbsync.sync<p> source module nbsync.sync </p> <p> Classes </p> <ul> <li> <p>Synchronizer</p> </li> </ul> <p> Functions </p> <ul> <li> <p>update_notebooks</p> </li> <li> <p>convert</p> </li> <li> <p>convert_image</p> </li> <li> <p>remove_ansi</p> </li> <li> <p>convert_console</p> </li> <li> <p>convert_code_block</p> </li> </ul> <p> source dataclass Synchronizer(store: Store) </p> <p> Methods </p> <ul> <li> <p>parse</p> </li> <li> <p>execute</p> </li> <li> <p>convert</p> </li> </ul> <p> source method Synchronizer.parse(text: str) \u2192 Iterator[str | Image | CodeBlock] </p> <p> source method Synchronizer.execute(src_uri: str | None = None) \u2192 None </p> <p> Raises </p> <ul> <li> <p>SystemExit</p> </li> </ul> <p> source method Synchronizer.convert(text: str, src_uri: str | None = None) \u2192 Iterator[str | Cell] </p> <p> source update_notebooks(elem: Image | CodeBlock, notebooks: dict[str, Notebook], store: Store) \u2192 None </p> <p> source convert(elem: Image | CodeBlock, notebooks: dict[str, Notebook]) \u2192 str | Cell </p> <p> source convert_image(image: Image, nb: NotebookNode) \u2192 Cell </p> <p> source remove_ansi(text: str) \u2192 str </p> <p> source convert_console(image: Image, nb: NotebookNode) \u2192 str </p> <p> source convert_code_block(code_block: CodeBlock) \u2192 str </p>"}]}